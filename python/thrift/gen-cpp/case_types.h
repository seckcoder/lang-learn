/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef case_TYPES_H
#define case_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _TestCase__isset {
  _TestCase__isset() : text(false), name(true) {}
  bool text;
  bool name;
} _TestCase__isset;

class TestCase {
 public:

  static const char* ascii_fingerprint; // = "37B2446DC377ADEFEF2182DF53458E87";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0xB2,0x44,0x6D,0xC3,0x77,0xAD,0xEF,0xEF,0x21,0x82,0xDF,0x53,0x45,0x8E,0x87};

  TestCase() : id(0), text(), name("liwei") {
  }

  virtual ~TestCase() throw() {}

  int32_t id;
  std::string text;
  std::string name;

  _TestCase__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_text(const std::string& val) {
    text = val;
    __isset.text = true;
  }

  void __set_name(const std::string& val) {
    name = val;
    __isset.name = true;
  }

  bool operator == (const TestCase & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (__isset.text != rhs.__isset.text)
      return false;
    else if (__isset.text && !(text == rhs.text))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const TestCase &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestCase & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TestCase &a, TestCase &b);



#endif
